{
  "version": 3,
  "sources": ["../../@gsap/react/src/index.js"],
  "sourcesContent": ["/*!\n * @gsap/react 2.1.0\n * https://gsap.com\n *\n * Copyright 2008-2024, GreenSock. All rights reserved.\n * Subject to the terms at https://gsap.com/standard-license or for\n * Club GSAP members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n/* eslint-disable */\nimport { useEffect, useLayoutEffect, useState } from \"react\";\nimport gsap from \"gsap\";\n\nlet useIsomorphicLayoutEffect = typeof window !== \"undefined\" ? useLayoutEffect : useEffect,\n    isConfig = value => value && !Array.isArray(value) && typeof(value) === \"object\",\n    emptyArray = [],\n    defaultConfig = {},\n    _gsap = gsap; // accommodates situations where different versions of GSAP may be loaded, so a user can gsap.registerPlugin(useGSAP);\n\nexport const useGSAP = (callback, dependencies = emptyArray) => {\n  let config = defaultConfig;\n  if (isConfig(callback)) {\n    config = callback;\n    callback = null;\n    dependencies = \"dependencies\" in config ? config.dependencies : emptyArray;\n  } else if (isConfig(dependencies)) {\n    config = dependencies;\n    dependencies = \"dependencies\" in config ? config.dependencies : emptyArray;\n  }\n  let { scope, revertOnUpdate } = config,\n      [mounted, setMounted] = useState(false);\n  (callback && typeof callback !== \"function\") && console.warn(\"First parameter must be a function or config object\");\n  const context = _gsap.context(() => { }, scope),\n        contextSafe = (func) => context.add(null, func),\n        cleanup = () => context.revert(),\n        deferCleanup = dependencies && dependencies.length && !revertOnUpdate;\n  useIsomorphicLayoutEffect(() => {\n    callback && context.add(callback, scope);\n    if (!deferCleanup || !mounted) { // React renders bottom-up, thus there could be hooks with dependencies that run BEFORE the component mounts, thus cleanup wouldn't occur since a hook with an empty dependency Array would only run once the component mounts.\n      return cleanup;\n    }\n  }, dependencies);\n  deferCleanup && useIsomorphicLayoutEffect(() => {\n      setMounted(true);\n      return cleanup;\n    }, emptyArray);\n  return { context, contextSafe };\n};\nuseGSAP.register = core => { _gsap = core; };\nuseGSAP.headless = true; // doesn't require the window to be registered.\n"],
  "mappings": ";;;;;;;;;;;;AAUA,mBAAqD;AAGrD,IAAI,4BAA4B,OAAO,WAAW,cAAc,+BAAkB;AAAlF,IACI,WAAW,WAAS,SAAS,CAAC,MAAM,QAAQ,KAAK,KAAK,OAAO,UAAW;AAD5E,IAEI,aAAa,CAAC;AAFlB,IAGI,gBAAgB,CAAC;AAHrB,IAII,QAAQ;AAEL,IAAM,UAAU,CAAC,UAAU,eAAe,eAAe;AAC9D,MAAI,SAAS;AACb,MAAI,SAAS,QAAQ,GAAG;AACtB,aAAS;AACT,eAAW;AACX,mBAAe,kBAAkB,SAAS,OAAO,eAAe;AAAA,EAClE,WAAW,SAAS,YAAY,GAAG;AACjC,aAAS;AACT,mBAAe,kBAAkB,SAAS,OAAO,eAAe;AAAA,EAClE;AACA,MAAI,EAAE,OAAO,eAAe,IAAI,QAC5B,CAAC,SAAS,UAAU,QAAI,uBAAS,KAAK;AAC1C,EAAC,YAAY,OAAO,aAAa,cAAe,QAAQ,KAAK,qDAAqD;AAClH,QAAM,UAAU,MAAM,QAAQ,MAAM;AAAA,EAAE,GAAG,KAAK,GACxC,cAAc,CAAC,SAAS,QAAQ,IAAI,MAAM,IAAI,GAC9C,UAAU,MAAM,QAAQ,OAAO,GAC/B,eAAe,gBAAgB,aAAa,UAAU,CAAC;AAC7D,4BAA0B,MAAM;AAC9B,gBAAY,QAAQ,IAAI,UAAU,KAAK;AACvC,QAAI,CAAC,gBAAgB,CAAC,SAAS;AAC7B,aAAO;AAAA,IACT;AAAA,EACF,GAAG,YAAY;AACf,kBAAgB,0BAA0B,MAAM;AAC5C,eAAW,IAAI;AACf,WAAO;AAAA,EACT,GAAG,UAAU;AACf,SAAO,EAAE,SAAS,YAAY;AAChC;AACA,QAAQ,WAAW,UAAQ;AAAE,UAAQ;AAAM;AAC3C,QAAQ,WAAW;",
  "names": []
}
